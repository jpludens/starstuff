Goal: Organize tests into separate files
Goal: Fully implement Move validation
        (some classes are just rubberstamping)
Goal: Rejigger move validation to permit "neutral" moves when an effect is pending but not mandatory
        (I do not want Strategy classes to have to explicitly send Scrap() or Destroy() moves bc that would get old)
Goal: Create a Select() move that satisfies all pending effects
        (ActivateBase(recyclying_station); Select(scout, viper))

Goal? Generalize conditionality; e.g. Embassy Yacht
Goal? Generalize passive effects; e.g. Fleet HQ
Goal? Put Move validation and execution back in gamestate
        (current implementation is fine for toying around with,
         but is massively insecure if there is ever a web client providing Move objects)


Goal: Use a Strategy class to trigger deterministic abilities
Goal: use a Strategy class to mimic app

Goal: Create a data visualisation scheme for displaying an entire game's log of moves
      (eg, cards bought each round, additional cards drawn, damage done, etc)
Goal: Create a data analysis scheme for analyzing decks (and trade row favorablity)
      (eg, x combat guaranteed y combat possible per cycle; velocity (turns/cycle))
Goal: Create a data visualation scheme for deck progress throughout a game
      (eg, graph combat and trade potential over time)

Goal: Create a web interface for designing strategies
